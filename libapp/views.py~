from django.shortcuts import HttpResponse,render_to_response, RequestContext, HttpResponseRedirect
import re
from django.contrib.auth import authenticate
from django.contrib import auth
from libapp.models import Book, Author, Publisher, Genre, UploadFileForm


# Create your views here.


# Imaginary function to handle an uploaded file.

def handle_uploaded_file(f):
    with open('some/file/name.txt', 'wb+') as destination:
        for chunk in f.chunks():
            destination.write(chunk)

def upload_file(request):
    if request.method == 'POST':
        form = UploadFileForm(request.POST, request.FILES)
        if form.is_valid():
            handle_uploaded_file(request.FILES['file'])
            return HttpResponseRedirect('/')
    else:
        form = UploadFileForm()
    return render_to_response('home.html', {'form': form})

def login(request):
	if not request.user.is_anonymous():
		return HttpResponseRedirect("/home")
	if request.method=='POST':
		print request.POST['user']
		print request.POST['pass']
		usernam=request.POST['user']
		passwor=request.POST['pass']
		user=authenticate(username=usernam, password=passwor)
		print request.user
		if user is not None:
			auth.login(request,user)
			print request.user
			toreturn = {'string':"Logged in"}
			return HttpResponseRedirect("/home")
		else:
			toreturn = {'string':"Incorrect"}
			return render_to_response("login.html", toreturn, context_instance=RequestContext(request))
	else:
		print request
		toreturn = {'string':''}
		return render_to_response("login.html", toreturn, context_instance=RequestContext(request))

def logout(request):
	if not request.user.is_anonymous():
		auth.logout(request)
	toreturn = {'string':''}
	return HttpResponseRedirect("/")

def home(request):
	if request.user.is_anonymous():
		return HttpResponseRedirect("/");
	return render_to_response("home.html", context_instance=RequestContext(request))

def viewbooks(request):
	if request.user.is_anonymous():
		return HttpResponseRedirect("/");
	toreturn = {'lis':Book.objects.all()}
	return render_to_response("viewbooks.html", toreturn, context_instance=RequestContext(request))

def viewauthors(request):
	if request.user.is_anonymous():
		return HttpResponseRedirect("/");
	toreturn = {'lis':Author.objects.all()}
	return render_to_response("viewauthors.html", toreturn, context_instance=RequestContext(request))

def viewgenres(request):
	if request.user.is_anonymous():
		return HttpResponseRedirect("/");
	toreturn = {'lis':Genre.objects.all()}
	return render_to_response("viewgenres.html", toreturn, context_instance=RequestContext(request))

def viewpublishers(request):
	if request.user.is_anonymous():
		return HttpResponseRedirect("/");
	toreturn = {'lis':Publisher.objects.all()}
	return render_to_response("viewpublishers.html", toreturn, context_instance=RequestContext(request))

def bookinfo(request,book_id):
	if request.user.is_anonymous():
		return HttpResponseRedirect("/");
	toreturn = {'book':Book.objects.get(id=book_id)}
	return render_to_response("bookinfo.html", toreturn, context_instance=RequestContext(request))

def authorinfo(request,author_id):
	if request.user.is_anonymous():
		return HttpResponseRedirect("/");
	auth = Author.objects.get(id=author_id)
	toreturn = {'auth':auth, 'lis':auth.book_set.all()}
	return render_to_response("authorinfo.html", toreturn, context_instance=RequestContext(request))

def publisherinfo(request,publisher_id):
	if request.user.is_anonymous():
		return HttpResponseRedirect("/");
	publ = Publisher.objects.get(id=publisher_id)
	toreturn = {'publ':publ, 'lis':publ.book_set.all()}
	return render_to_response("publisherinfo.html", toreturn, context_instance=RequestContext(request))

def genreinfo(request,genre_id):
	if request.user.is_anonymous():
		return HttpResponseRedirect("/");
	genr = Genre.objects.get(id=genre_id)
	toreturn = {'genr':genr, 'lis':genr.book_set.all()}
	return render_to_response("genreinfo.html", toreturn, context_instance=RequestContext(request))

def search(request):
	if request.user.is_anonymous():
		return HttpResponseRedirect("/");
	print request
	lis = []
	i_d = []
	div = 'bookinfo'
	r = re.compile('.*'+request.GET['search']+'.*', re.IGNORECASE)
	if request.GET['choice']=='Books':
		allbooks = Book.objects.all()
		div = 'bookinfo'
		for i in allbooks:
			if not r.match(i.name) is None:
				lis.append(i)
				i_d.append(i.id)

	if request.GET['choice']=='Authors':
		allauthors = Author.objects.all()	
		div = 'authorinfo'
		for i in allauthors:
			if not r.match(i.name) is None:
				lis.append(i)
				i_d.append(i.id)

	if request.GET['choice']=='Publishers':
		allpublishers = Publisher.objects.all()	
		div = 'publisherinfo'
		for i in allpublishers:
			if not r.match(i.name) is None:
				lis.append(i)
				i_d.append(i.id)

	if request.GET['choice']=='Genres':
		allgenres = Genre.objects.all()	
		div = 'genreinfo'
		for i in allgenres:
			if not r.match(i.name) is None:
				lis.append(i)
				i_d.append(i.id)

	toreturn = {'div':div,'lis':lis, 'i_d':i_d, 'choice':request.GET['choice']}
	return render_to_response("searchresults.html", toreturn, context_instance=RequestContext(request))
